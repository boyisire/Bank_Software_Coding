/****************************************************************/
/* 模块编号    ：swDb_Inf                                       */ 
/* 模块名称    ：INFORMIX数据库操作                             */
/* 作	 者    ：史正烨                                         */
/* 建立日期    ：2001.3.14                                      */
/* 最后修改日期：2001/6/29                                      */
/* 模块用途    ：智能化路由模块                                 */
/* 本模块中包含如下函数及功能说明：                             */
/*			 （1）void main();                      */
/*			 （2）void swQuit();                    */
/*			 （3）int  swPresql();                  */
/*			 （4）int  swExstr();                   */
/****************************************************************/

/* 数据库定义 */
EXEC SQL INCLUDE sqlca;
EXEC SQL INCLUDE sqlda;
EXEC SQL include locator.h;
EXEC SQL include "sqltypes.h";
EXEC SQL include "decimal.h";

/* switch定义 */
#include "switch.h" 

#ifndef NULL
#define	NULL	0
#endif

/* 常量定义 */
#define   cSQLSELECT  'S'
#define   cSQLUPDATE  'U'
#define   cSQLINSERT  'I'
#define   cSQLDELETE  'D'
#define   cSQLOPEN    'O'
#define   cSQLFETCH   'F'
#define   cSQLCLOSE   'C'

/* 变量定义 */
struct sqlda * bind_dp;
struct sqlda * select_dp;

/* 函数原型定义 */
void swQuit(int);
int swPresql(char *,char *,char p[][iPERFLDVALUELEN+1] ,short *,char *); 
int swExstr(char *,char *);
/**************************************************************
 ** 函数名      ：main
 ** 功  能      ：主函数 
 ** 作  者      ：史正烨 
 ** 建立日期    ：1999/11/18
 ** 最后修改日期：2000/4/7
 ** 调用其它函数：
 ** 全局变量    ：
 ** 参数含义    ：
 ** 返回值      ：
***************************************************************/

main(int argc,char *argv[])
{
  FILE    *fp;                 /* 文件指针 */
  int count;
  void *data;
  short   i,j,m;                 /* 临时计数变量 */
  short   rownum;
  short   row_size;
  short   ilRc;                /* 返回码 0-成功 非0-不成功 */
  short   ilOrgqid=0;          /* 源发邮箱号 */
  short   ilReadSize;          /* 读到的长度 */
  short   ilPriority;          /* 信箱参数:优先级 */
  short   ilClass;             /* 信箱参数:类别 */
  short   ilType;              /* 信箱参数:类型 */
  short   ilResultlen;         /* 表达式计算结果长度 */
  short   ilFldlen;            /* 域长 */
  short   ilFldnum=0;          /* 域名 */
  short   ilDb_id;             /* 数据库ID */
  char    c;
  char    alSqlcode[iPERFLDVALUELEN + 1];
  char    alSqlnrows[iPERFLDVALUELEN + 1];
  char    alFldname[iFLDNAMELEN + 1];
  char    palSqlval[10][iPERFLDVALUELEN + 1];
  char    cSqlflag;            /* SQL语句标识 */
  char    alCur[21];           /* 游标名 */
  char    buffer[201];
  char    alBuf[201];
  char    alFilename[31];      /* 文件名 */
  char    alOffset[11];        
  char    *alPos;
  long    llOffset; 
  long    llTranid;            /* 交易流水号 */
  struct  msgpack  slMsgpack;  /* 报文定义 */

  /* 数据库变量定义 */
  EXEC SQL BEGIN DECLARE SECTION;
    char   alDb_name[21];       /* 数据库名 */
    char   alSqlstr[iPERFLDVALUELEN + 1];
    char   alSqltext[iPERFLDVALUELEN + 1];
    char   alSql[iPERFLDVALUELEN + 1];
    char   alSelectresult[iPERFLDVALUELEN]; 
  EXEC SQL END DECLARE SECTION;

  /* 打印版本号 */
  if (argc > 1)
    _swVersion("swDb Version 4.3.0",argv[1]);

  /* LICENSE */
  if (_swLicense("swDb")) exit(FAIL);

  if(argc < 3) {
    fprintf(stderr, "使用方法: swDb_Inf {-i ID -n database_name -d cgDebug}\n");
    exit(-1);
  }

  /* 设置调试程序名称 */
  memset(agDebugfile, 0x00, sizeof(agDebugfile));
  strncpy(agDebugfile, "swDb_Inf.debug", sizeof(agDebugfile));

  /* 通过命令行取得数据库ID，数据库名 */
  while((c=getopt(argc,argv,"i:n:d:u:p"))!=-1) {
    switch( c ) {
      case 'i':
        ilDb_id=atoi(optarg);
        break;
      case 'n':
        memset(alDb_name,0x00,sizeof(alDb_name));
        strcpy(alDb_name,optarg);
        break;
      case 'd':
        cgDebug=atoi(optarg);
        break;
      case 'u':
      case 'p':
      default:
        break;
    }
  }

  /* 忽略SIGCLD、SIGINT、SIGQUIT、SIGHUP 信号 */
  signal( SIGTERM , swQuit  );
  signal( SIGINT  , SIG_IGN );
  signal( SIGQUIT , SIG_IGN );
  signal( SIGTSTP , SIG_IGN );
  signal( SIGHUP  , SIG_IGN );

  swVdebug(2,"S0010: 忽略SIGCLD、SIGINT、SIGQUIT、SIGHUP 信号");

  /* 定位本地邮箱 */
  if(qattach(iMBDBSQL)) {
   swVdebug(0,"S0020: 初始化邮箱出错!");
   exit(FAIL);
  }
  swVdebug(2,"S0030: 定位本地邮箱成功");

  /* 打开数据库 */
  EXEC SQL DATABASE :alDb_name;
  if (sqlca.sqlcode != 0) {
    swVdebug(2,"S0040: 打开[%s]数据库失败[%d]",alDb_name,sqlca.sqlcode);
    return(FAIL);
  }
  swVdebug(2,"S0050: 打开[%s]数据库成功",alDb_name);

  for( ; ; ) {
    /* 从数据库邮箱读入Type为数据库ID的报文 */ 
    ilReadSize = iMSGMAXLEN;
    ilPriority = 0;
    ilClass = 0;
    ilType = ilDb_id;

    if( ( ilRc = qread2( (char *)&slMsgpack, &ilReadSize, &ilOrgqid,
      &ilPriority,&ilClass,&ilType)) != SUCCESS ) {
      swVdebug(1,"S0060: 读邮箱出错");
      swMberror(ilRc, NULL);
      swQuit(FAIL);
    }

    /* 判断报文格式类型是否为内部格式报文 */ 
    if ( slMsgpack.sMsghead.iMsgformat != iFMTIMF ) {
      /* 报文头.报文格式类型 不为 <FML内部报文格式> */
      swVdebug(1,"S0070: 报文格式类型不为FML报文格式");
      _swMsgsend( 303004, NULL );
      continue;
    }
    if (cgDebug >= 2) 
      swDebugfml((char *)&slMsgpack);

    /* 将报文中IMF各域分解至FML变量预解池（调预解IMF格式函数）中 */
    ilRc = swFmlunpack( slMsgpack.aMsgbody,slMsgpack.sMsghead.iBodylen, 
      psgPreunpackbuf );
    if ( ilRc == FAIL ) {
      /* 解IMF出错 */
      swVdebug(1,"S0080: 错误:FML报文解包出错!");
      _swMsgsend( 399001, NULL ); 
      continue;
    }
    swVdebug(2,"S0090: FML报文解包成功");

    /* 从报文中取出 _SQLTEXT域  */
    memset(alSqlstr,0x00,sizeof(alSqlstr));
    ilRc = swFmlget(psgPreunpackbuf,"_SQLTEXT",&ilFldlen,alSqlstr);
    if (ilRc) {
      swVdebug(1,"S0100: 取_SQLTEXT域出错");
      continue;
    }
    swVdebug(2,"S0110: 取_SQLTEXT域成功");
     
    /* 解析SQL语句 */
    ilRc = swPresql(alSqlstr,alSqltext,palSqlval,&ilFldnum,&cSqlflag);
    if (ilRc) {
      swVdebug(1,"S0120: SQL语句不合法");
      continue;
    }
    swVdebug(2,"S0130: 解析SQL语句成功");
    
    strcpy(alSqlcode,"0");
    strcpy(alSqlnrows,"0");

    switch( cSqlflag) {
      case cSQLSELECT:
        /* 根据SQL语句动态定义游标 */
        EXEC SQL PREPARE S FROM :alSqltext;
        if (sqlca.sqlcode != 0) {
          swVdebug(1,"S0140: 数据库错误[%d]:PREPARE dosql1 FROM %s",
            sqlca.sqlcode,alSqltext);
          sprintf(alSqlcode,"%d",sqlca.sqlcode);
          exit(FAIL);
        }

	EXEC SQL DESCRIBE S INTO select_dp;
	if( (row_size = init_sqlda()) < 0) {
	  swVdebug(2,"S0150: 数据库初始化错误[%d]",sqlca.sqlcode);
	  sprintf(alSqlcode,"%d",sqlca.sqlcode);
	  exit(FAIL);
	}

        EXEC SQL DECLARE cur1 CURSOR FOR S;
        if (sqlca.sqlcode != 0) {
          swVdebug(1,"S0160: 定义游标错误[%d]",sqlca.sqlcode);
          sprintf(alSqlcode,"%d",sqlca.sqlcode);
          exit(FAIL);
        }

        /* 打开游标 */
        EXEC SQL OPEN cur1;
        if (sqlca.sqlcode!=0) {
          swVdebug(1,"S0170: 打开游标错误[%d]",sqlca.sqlcode);
          sprintf(alSqlcode,"%d",sqlca.sqlcode);
          exit(FAIL);
        }

	rownum = 0;
        while( 1 ) {
          /* 将记录FETCH到临时结构中 */
          EXEC SQL FETCH cur1 USING DESCRIPTOR select_dp;
	  if(sqlca.sqlcode == SQLNOTFOUND)	break;
          for ( i=0; i<select_dp->sqld; i++ ) {
            sprintf(alFldname,"%s#%c",palSqlval[i]+1,rownum+1);
	    /* 外循环：针对每一行数据循环处理 */
	    count = (FetArrSize == 0) ? 1 : sqlca.sqlerrd[2];
	    for (j = 0; j < count; j ++) {
		data = select_dp->sqlvar[i].sqldata + (j*(select_dp->sqlvar[i].sqllen));
		switch (select_dp->sqlvar[i].sqltype) {
		  case CINTTYPE:
		    sprintf(buffer, "%d", *(int *) data);
		    break;
		  case CFIXCHARTYPE:
		  case CCHARTYPE:
		  default:
		    sprintf(buffer, "%s", data);
		    break;
		} /* end switch */
		strcpy(alBuf,buffer);
		_swTrim(alBuf);
		ilRc = swFmlset(alFldname,strlen(alBuf),alBuf,psgPreunpackbuf);
		if (ilRc) {
		  sprintf(alSqlcode,"FML%d",ilRc);
                  swVdebug(2,"S0180: FMLSET 报文出错");
                  break;
                }
	    } /* end for (j=0...) */
          }
	  rownum++;
        }

	if(rownum > 0)
	  strcpy(alSqlcode,"0");
	else
	  sprintf(alSqlcode,"%d",sqlca.sqlcode);
        EXEC SQL CLOSE cur1;
	free(select_dp);

        swVdebug(2,"S0190: 执行SQL语句[%s]成功",alSqltext);
        sprintf(alSqlnrows,"%d",rownum);
        break;

      case cSQLUPDATE:
      case cSQLINSERT:
      case cSQLDELETE:
        /* 执行动态SQL语句 */
        EXEC SQL PREPARE dosql2 FROM :alSqltext;
        if (sqlca.sqlcode != 0) {
          swVdebug(1,"S0200: 数据库错误[%d] : PREPARE dosql2 FROM %s",
            sqlca.sqlcode,alSqltext);
          sprintf(alSqlcode,"%d",sqlca.sqlcode);
          break;
        }

        EXEC SQL EXECUTE dosql2;
        if (sqlca.sqlcode != 0) {
          swVdebug(1,"S0210: 数据库错误[%d] : EXEC SQL EXECUTE dosql2 %s",
            sqlca.sqlcode,alSqltext);
          sprintf(alSqlcode,"%d",sqlca.sqlcode);
          EXEC SQL ROLLBACK WORK;
          break;
        }
        sprintf(alSqlnrows,"%d",sqlca.sqlerrd[2]);
        EXEC SQL COMMIT WORK;

        swVdebug(2,"S0220:  执行SQL语句[%s]成功",alSqltext);
        break;

      case cSQLOPEN:
        /* 定义游标 */
        alPos = strstr(alSqltext,"CURSOR");
        if (!alPos) {
          swVdebug(1,"S0230: OPEN语句定义出错");
          strcpy(alSqlcode,"-1");
        }
        strncpy(alCur,alSqltext + 5,alPos -alSqltext -6);
        alPos = strstr(alSqltext,"SELECT ");
        if ( !alPos ) {
           swVdebug(1,"S0240: OPEN语句定义出错");
           strcpy(alSqlcode,"-1");
        }
        strcpy(alSql,alPos);
        _swTrim(alSql);
        EXEC SQL PREPARE S1 FROM :alSql;
        if (sqlca.sqlcode!=0) {
          swVdebug(1,"S0250: 定义SELETE语句错误[%d] : %s",sqlca.sqlcode,alSql);
          sprintf(alSqlcode,"%d",sqlca.sqlcode);
          break;
        }
	EXEC SQL DESCRIBE S1 INTO select_dp;
	if( (row_size = init_sqlda()) < 0) {
	  swVdebug(2,"S0260: 数据库初始化错误[%d]",sqlca.sqlcode);
	  sprintf(alSqlcode,"%d",sqlca.sqlcode);
	  exit(FAIL);
	}

        EXEC SQL DECLARE alCur CURSOR FOR S1;
        if (sqlca.sqlcode != 0) {
          swVdebug(1,"S0270: 定义游标错误[%d]",sqlca.sqlcode);
          sprintf(alSqlcode,"%d",sqlca.sqlcode);
          exit(FAIL);
        }

        /* 打开游标 */
        EXEC SQL OPEN alCur;
        if (sqlca.sqlcode!=0) {
          swVdebug(1,"S0280: 打开游标错误[%d]",sqlca.sqlcode);
          sprintf(alSqlcode,"%d",sqlca.sqlcode);
          exit(FAIL);
        }

        /* 创建名为游标名.交易流水号的临时文件 */
        llTranid=slMsgpack.sMsghead.lTranid;
        sprintf(alFilename,"%s/tmp/%s.%d",getenv("SWITCH_DIR"),alCur,llTranid);
        if ((fp = fopen(alFilename,"w")) == NULL) {
          swVdebug(1,"S0290: 创建临时文件出错");
          strcpy(alSqlcode,"-1");
          break;
        }
        swVdebug(2,"S0300: 创建临时文件[%s]",alFilename);

        while( 1 ) {
          /* 将记录FETCH到临时结构中 */
          EXEC SQL FETCH alCur USING DESCRIPTOR select_dp;
	  if(sqlca.sqlcode == SQLNOTFOUND)	break;
          for ( i=0; i<select_dp->sqld; i++ ) {
	    /* 外循环：针对每一行数据循环处理 */
	    count = (FetArrSize == 0) ? 1 : sqlca.sqlerrd[2];
	    for (j = 0; j < count; j ++) {
		data = select_dp->sqlvar[i].sqldata + (j*(select_dp->sqlvar[i].sqllen));
		switch (select_dp->sqlvar[i].sqltype) {
		  case CINTTYPE:
		    sprintf(buffer, "%d", *(int *) data);
		    break;
		  case CFIXCHARTYPE:
		  case CCHARTYPE:
		  default:
		    sprintf(buffer, "%s", data);
		    break;
		} /* end switch */
		strcpy(alBuf,buffer);
		_swTrim(alBuf);
		strcat(alBuf,"|");
		fwrite(alBuf,sizeof(char),strlen(alBuf),fp);
	    } /* end for (j=0...) */
          }
	  rownum++;
	  fputc('\n',fp);
        }

	if(rownum > 0)
	  strcpy(alSqlcode,"0");
	else
	  sprintf(alSqlcode,"%d",sqlca.sqlcode);
        EXEC SQL CLOSE cur1;
	free(select_dp);
	fclose(fp);

        swVdebug(2,"S0310: 将所有记录写入文件[%s]",alFilename);

        /* 关闭游标 */
        EXEC SQL CLOSE alCur;

        /* 初始化 _SQLOFFSET域为0 */
        sprintf(alOffset,"0");
        ilRc = swFmlset("_SQLOFFSET",strlen(alOffset),alOffset,psgPreunpackbuf);
        if (ilRc) {
          swVdebug(1,"S0320: 置[_SQLOFFSET]域出错");
          strcpy(alSqlcode,"-1");
        }
        sprintf(alSqlnrows,"%d",i);
        break;

      case cSQLFETCH:
        /* 打开名为游标名.交易流水号的临时文件 */
        alPos = strstr(alSqltext,"INTO");
        if ( !alPos ) {
           swVdebug(1,"S0330: OPEN语句定义出错");
           strcpy(alSqlcode,"-1");
        }
        strncpy(alCur,alSqltext + 6,alPos -alSqltext -7);
        llTranid=slMsgpack.sMsghead.lTranid;
        sprintf(alFilename,"%s/tmp/%s.%d",getenv("SWITCH_DIR"),alCur,llTranid);
        if ((fp = fopen(alFilename,"r")) == NULL) {
          swVdebug(1,"S0340:打开文件出错[%d]",fp);
          strcpy(alSqlcode,"-1");
          break;
        }
        swVdebug(2,"S0350: 打开临时文件[%s]",alFilename);
       
        /* 取文件偏移量 */
        memset(alOffset,0x00,sizeof(alOffset));
        ilRc = swFmlget(psgPreunpackbuf,"_SQLOFFSET",&ilFldlen,alOffset);
        if (ilRc) {
          swVdebug(1,"S0360: 取_SQLOFFSET域出错");
          strcpy(alSqlcode,"-1");
          break;
        }
        llOffset = atol(alOffset);
        ilRc =fseek(fp,llOffset,SEEK_SET);
        if(ilRc < 0) {
          swVdebug(1,"S0370: 操作文件出错[%d]",ilRc);
          strcpy(alSqlcode,"-1");
          break;
        } 

        /* 从文件中取出一条数据库记录 */
        memset(alBuf,0x00,sizeof(alBuf));
        for(i=0; ;i++) {
          alBuf[i] = fgetc(fp);
          if(alBuf[i] =='\n' || alBuf[i] ==EOF)
            break;
        }   
        /* 关闭临时文件 */
        fclose(fp);
        if ( i == 0) {
          swVdebug(1,"S0380:FETCH 记录为空");
          sprintf(alSqlcode,"%d",SQLNOTFOUND);
          break;
        }
        strcpy(alSqlnrows,"1");

        /* 将记录中的所有字段置入报文中 */
        for (j = 0;j < ilFldnum;j++) {
          _swGetOneField(alBuf,j+1,alSelectresult,'|'); 
          strcpy(alFldname,palSqlval[j]+1);
          ilRc = swFmlset(alFldname,strlen(alSelectresult),
            alSelectresult,psgPreunpackbuf);
          if (ilRc) {
            sprintf(alSqlcode,"FML%d",ilRc);
            break;
          }
        }
        swVdebug(2,"S0390: 将记录置入报文成功"); 

        /* 重置 _SQLOFFSET域 */
        llOffset = llOffset + i + 1;
        sprintf(alOffset,"%d",llOffset);
        ilRc = swFmlset("_SQLOFFSET",strlen(alOffset),alOffset,psgPreunpackbuf);
        if (ilRc) {
          swVdebug(1,"S0400: 置[_SQLOFFSET]域出错");
          strcpy(alSqlcode,"-1");
        }
        break;

      case cSQLCLOSE:
        /* 删除名为游标.交易流水号的临时文件 */
        strncpy(alCur,alSqltext + 6,strlen(alSqltext) - 6); 
        llTranid=slMsgpack.sMsghead.lTranid;
        sprintf(alFilename,"%s/tmp/%s.%d",getenv("SWITCH_DIR"),alCur,llTranid);
        unlink(alFilename);
        swVdebug(2,"S0410: 删除临时文件[%s]",alFilename);
        break;

      default:
        swVdebug(1,"S0420: SQL语句[%s]不合法",alSqltext);
        strcpy(alSqlcode,"-1");
        break;
    }

    /* 置 _SQLCODE、_SQLNROWS域 */
    ilRc = swFmlset("_SQLCODE",strlen(alSqlcode),alSqlcode,psgPreunpackbuf);
    if (ilRc) {
      swVdebug(1,"S0430: 置[_SQLCODE]域出错");
      continue;
    }
    ilRc = swFmlset("_SQLNROWS",strlen(alSqlnrows),
      alSqlnrows,psgPreunpackbuf);
    if (ilRc) {
      swVdebug(1,"S0440: 置[_SQLNROWS]域出错");
      continue;
    }

    /* 报文打包后发送到报文源发邮箱 */
    ilRc = swFmlpack(psgPreunpackbuf,slMsgpack.aMsgbody,
      &(slMsgpack.sMsghead.iBodylen));
    if (ilRc) {
      swVdebug(1,"S0450: 生成FML报文失败");
      continue;
    }
    ilRc = qwrite2( (char *)&slMsgpack, slMsgpack.sMsghead.iBodylen+iMSGHEADLEN,
      ilOrgqid,ilPriority,ilClass,ilType );
    if (ilRc) {
      swVdebug(2,"S0460: 发送报文至源发邮箱出错");
      swMberror(ilRc, "错误:qwrite至源发邮箱出错!");
      swQuit(FAIL);
    }
    swVdebug(1,"S0470: 将报文发送回源邮箱");
    if (cgDebug >=2) swDebugfml((char *)&slMsgpack);
  }
}

void swQuit(int sig)
{
  int i;
  signal(SIGTERM,SIG_IGN);
  EXEC SQL DATABASE CLOSE;
  swVdebug(0,"S0480: [swDb_Inf]已经停止!");
  qdetach();

  exit(sig);
}

static int swPresql(char *aSqlstr,char *aSqltext,char paSqlval[10][iPERFLDVALUELEN + 1],short *iFldnum,char *alSqlflag)
{
  char *alPos1;
  char *alPos2;
  char alSqlval[iPERFLDVALUELEN + 1];
  char alSqlstr[iPERFLDVALUELEN + 1];
  /* modified by wangpan */
  char alFldexpress[2*iPERFLDVALUELEN + 1],alTmpexp[iPERFLDVALUELEN + 1];
  /* end modified */
  char alFldvalue[iPERFLDVALUELEN + 1];
  char alBuf[iPERFLDVALUELEN + 1];
  short ilFldlen,ilRc;
  short i = 0;

  strcpy(alSqlstr,aSqlstr);
  for(;;) {
    /* 去变量定义符，取SQL语句 */
    alPos1 = strrchr(alSqlstr,'{');
    if (!alPos1) 
      break;
    alPos2 = strchr(alPos1,'}');
    if (!alPos2)  
      break;
    memset(alFldexpress,0x00,sizeof(alFldexpress));
    /* strncpy(alFldexpress,alPos1 + 1,alPos2 - alPos1 - 1); */
    /* delete   by wangpan 2001/11/29                        */ 
    /* modified by wangpan 2001/11/29                        */
    memset(alTmpexp,0x00,sizeof(alTmpexp));
    strncpy(alTmpexp,alPos1 + 1,alPos2 - alPos1 - 1);
    ilRc = _swExpN2T(alTmpexp,alFldexpress);
    if(ilRc!=0) return(ilRc);
    /* end modified by wangpan 2001/11/29                    */

    ilRc = _swExpress(alFldexpress,alFldvalue,&ilFldlen);
    if (ilRc) {
      swVdebug(3,"S0490: 计算表达式[%s]出错",alFldexpress);
      return(ilRc);
    }
    strcpy(alBuf,alPos2 + 1);
    strncpy(alPos1,alFldvalue,ilFldlen);
    strcpy(alPos1 + ilFldlen,alBuf);
  }
  ilRc = swExstr(alSqlstr,alSqlflag);
  if (ilRc) {
    swVdebug(3,"S0500: SQL语句[%s]不合法",alSqlstr);
    return(ilRc);
  }

  switch (alSqlflag[0]) {
    case cSQLSELECT:
      alPos1 = strstr(alSqlstr,"INTO ");
      if (!alPos1)
        return (FAIL);
      if ( alSqlflag[0] = cSQLSELECT) {
        alPos2 = strstr(alPos1,"FROM ");
        if (!alPos1)
          return (FAIL);
        strcpy(aSqltext,alSqlstr);
        strcpy(aSqltext+(alPos1-alSqlstr),alPos2); 
        memset(alSqlval,0x00,sizeof(alSqlval));
        strncpy(alSqlval,alPos1 + 5 ,alPos2 - alPos1 - 5);
        _swTrim(aSqltext);
        _swTrim(alSqlval);
        alPos1 = alSqlval;
      }
      for (;;) {
        alPos2 = strchr(alPos1,',');
        if (!alPos2) 
          break;
        memset(paSqlval[i],0x00,iPERFLDVALUELEN + 1);
        strncpy(paSqlval[i],alPos1,alPos2 - alPos1);
        _swTrim(paSqlval[i]);
        i++;
        alPos1 = alPos2 + 1;
      }
      if (strlen(alPos1) >= 0) {
        memset(paSqlval[i],0x00,iPERFLDVALUELEN + 1);
        strcpy(paSqlval[i],alPos1);
        _swTrim(paSqlval[i]);
        i++;
      }
      *iFldnum = i ;
      break;

    case cSQLOPEN:
      alPos1 = strstr(alSqlstr,"SELECT ");
      if (!alPos1)
        return (FAIL);
      alPos1 = alPos1 + 8;
      alPos2 = strstr(alPos1,"FROM ");
      if (!alPos2)
        return (FAIL);
      for (;;) {
        alPos2 = strchr(alPos1,',');
        if (!alPos2) 
          break;
        i++;
        alPos1 = alPos2 + 1;
      }
      if (strlen(alPos1) >= 0)
        i = i + 1;
      *iFldnum = i ;
      strcpy(aSqltext,alSqlstr);
      break;

    case cSQLFETCH:
      alPos1 = strstr(alSqlstr,"INTO ");
      if (!alPos1)
        return(FAIL);
      alPos1 = alPos1 + 5 ;
      for (;;) {
        alPos2 = strchr(alPos1,',');
        if (!alPos2) 
          break;
        memset(paSqlval[i],0x00,iPERFLDVALUELEN + 1);
        strncpy(paSqlval[i],alPos1,alPos2 - alPos1);
        _swTrim(paSqlval[i]);
        i++;
        alPos1 = alPos2 + 1;
      }
      if (strlen(alPos1) >= 0) {
        memset(paSqlval[i],0x00,iPERFLDVALUELEN + 1);
        strcpy(paSqlval[i],alPos1);
        _swTrim(paSqlval[i]);
        i++;
      }
      *iFldnum = i ;
      strcpy(aSqltext,alSqlstr);
      break;

    default:
      _swTrim(alSqlstr);
      strcpy(aSqltext,alSqlstr);
      break;
  }
  return(SUCCESS);
}

int swExstr(char *alStr,char *cFlag)
{
   char *alPos;
   int i;

   /* 将SQL语句关键字小写转换成大写 */
   alPos = strstr(alStr,"select"); 
   if (alPos) {
     for( i=0;i<6;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"update"); 
   if (alPos) {
     for( i=0;i<6;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"insert"); 
   if (alPos) {
     for( i=0;i<6;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"delete"); 
   if (alPos) {
     for( i=0;i<6;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"from"); 
   if (alPos) {
     for( i=0;i<4;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"into"); 
   if (alPos) {
     for( i=0;i<4;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"where"); 
   if (alPos) {
     for( i=0;i<5;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"open"); 
   if (alPos) {
     for( i=0;i<4;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"declare"); 
   if (alPos) {
     for( i=0;i<7;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"cursor"); 
   if (alPos) {
     for( i=0;i<6;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"for"); 
   if (alPos) {
     for( i=0;i<3;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"fetch"); 
   if (alPos) {
     for( i=0;i<5;i++)
       alPos[i] = alPos[i] - 32;
   }
   alPos = strstr(alStr,"close"); 
   if (alPos) {
     for( i=0;i<5;i++)
       alPos[i] = alPos[i] - 32;
   }

  /* 取SQL语句标识 */
  if( !strncmp(alStr,"SELECT ",7) ) {
    cFlag[0]=cSQLSELECT;
    return(SUCCESS);
  }
  if( !strncmp(alStr,"UPDATE ",7) ) {
    cFlag[0] = cSQLUPDATE;
    return(SUCCESS);
  }
  if( !strncmp(alStr,"INSERT ",7) ) {
    cFlag[0]=cSQLINSERT;
    return(SUCCESS);
  }
  if( !strncmp(alStr,"DELETE ",7) ) {
    cFlag[0]=cSQLDELETE;
    return(SUCCESS);
  }
  if( !strncmp(alStr,"OPEN ",5) ) {
    cFlag[0]=cSQLOPEN;
    return(SUCCESS);
  }
  if( !strncmp(alStr,"FETCH " ,6) ) {
    cFlag[0]=cSQLFETCH;
    return(SUCCESS);
  }
  if( !strncmp(alStr,"CLOSE " ,6) ) {
    cFlag[0]=cSQLCLOSE;
    return(SUCCESS);
  }
  else
     return(FAIL);
}

/************************************************************************
* 函数: init_sqlda()
* 作用: 为SQLDA申请空间
* 返回值: 0 正确，否则有错误
************************************************************************/
int init_sqlda()
{
    int i, j, row_size=0, msglen=0, num_to_alloc;
    struct sqlvar_struct *col_ptr;

    /* Step 1: 获得一行数据的长度 */
    for (i = 0, col_ptr=select_dp->sqlvar; i < select_dp->sqld; i++,col_ptr++) {
	/* msglen变量存放查询数据的所有列的长度和。*/
	msglen += col_ptr->sqllen;	/* get database sizes */
	/* 为col_ptr->sqllen 重新赋值，该值是在C下的大小。
	如：在数据库中的字符串，在C中应该多一个字节空间来存放NULL的结束符。*/
	col_ptr->sqllen = rtypmsize(col_ptr->sqltype, col_ptr->sqllen);
	/*row_size变量存放了在C程序中的所有列的长度和。
	这个值是应用程序为存放一行数据所需要申请的内存空间*/
	row_size += col_ptr->sqllen;
    }

    /* Step 2: 设置FetArrSize值*/
    if (FetArrSize == -1) {	/* if FetArrSize not yet initialized */
	if (FetBufSize == 0)	/* if FetBufSize not set */
	    FetBufSize = 4096;	/* default FetBufSize */
	FetArrSize = FetBufSize/msglen;
    }
    num_to_alloc = (FetArrSize == 0)? 1: FetArrSize;
    /* 设置sqlvar_struct结构中的数据类型为相应的C的数据类型*/
    for (i = 0, col_ptr= select_dp->sqlvar; i < select_dp->sqld; i++,col_ptr++){
	switch(col_ptr->sqltype) {
	    case SQLCHAR:
		col_ptr->sqltype = CFIXCHARTYPE;
		col_ptr->sqllen += 1;
		break;
	    case SQLMONEY:
	    case SQLDECIMAL:
		col_ptr->sqltype = CFIXCHARTYPE;
		col_ptr->sqllen = rtypmsize(CDECIMALTYPE,0);
		break;
	    default: /* 其他数据类型*/
		col_ptr->sqllen = rtypwidth( col_ptr->sqltype,\
			col_ptr->sqllen);
		col_ptr->sqltype = CFIXCHARTYPE;
		break;
	} /* switch */

	/* Step 5: 为指示符变量申请空间*/
	col_ptr->sqlind = (short *) malloc(sizeof(short) * num_to_alloc);
	if (!col_ptr->sqlind) {
	    swVdebug(2,"indicator malloc failed");
	    return -1;
	}
	/* Step 6 ：为存放非TEXT 和BLOB的数据类型的sqldata申请空间.
	注意的是:
	申请的地址是(char *)，在输出数据时，要按照相应的数据类型做转换。*/
	if (col_ptr->sqltype != CLOCATORTYPE) {
            col_ptr->sqldata = (char *) malloc(col_ptr->sqllen * num_to_alloc);
            if (!col_ptr->sqldata) {
                swVdebug(2,"sqldata malloc failed\n");
                return -1;
            }
	}
    } /* end for */
    return msglen;
}

short free_sqld()
{
    /* Free space used by the descriptors themselves. */
    free(select_dp);
    EXEC SQL COMMIT WORK;
    return(0);
}
